{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// "public_fieldUnwrapping":{
	// 	"prefix": "+:",
	// 	"body": "public ${1:type} ${2:name}",
	// 	"description": "Public field creation"
	// },

	// "public_fieldUnwrappingExpr" : {
	// 	"prefix": "+:=",
	// 	"body": "public ${1:type} ${2:name} = ${3:value}",
	// 	"description": "Public field with wrapping"
	// },

	// "Javasss" :{ 
	// 	"prefix": "java${1:text}",
	// 	"body": "Standart ${1:text}"
	// }



	// =============================================
	// 	Fields:

	"java_shortPublicField" : {
		"prefix": "+:",
		"body": "public ${1:type} ${2:name}",
		"description": "Java: public field"
	},

	"java_shortPrivateField" : {
		"prefix": "-:",
		"body": "private ${1:type} ${2:name}",
		"description": "Java: private field"
	},

	"java_shortProtectedField" : {
		"prefix": "/:",
		"body": "protected ${1:type} ${2:name}",
		"description": "Java: protected field"
	},



	// =============================================
	// 	Static Fields:


	"java_shortStaticPublicField" : {
		"prefix": "+!:",
		"body": "public static ${1:type} ${2:name}",
		"description": "Java: public static field"
	},

	"java_shortStaticPrivateField" : {
		"prefix": "-!:",
		"body": "private static ${1:type} ${2:name}",
		"description": "Java: private static field"
	},

	"java_shortStaticProtected" : {
		"prefix": "-/:",
		"body": "protected static ${1:type} ${2:name}",
		"description": "Java: protected static field"
	},



	// =============================================
	// 	Methods:

	"java_shortPublicVoidMethod" : {
		"prefix": "+()",
		"body": [
			"public void ${1:methodName} (${2:params}) {",
			"    $3",
			"}$0"
		],
		"description": "Java: public void method"
	},

	"java_shortPrivateVoidMethod" : {
		"prefix": "-()",
		"body": [
			"private void ${1:methodName} (${2:params}) {",
			"    $3",
			"}$0"
		],
		"description": "Java: private void method"
	},

	"java_shortProtectedVoidMethod" : {
		"prefix": "/()",
		"body": [
			"protected void ${1:methodName} (${2:params}) {",
			"    $3",
			"}$0"
		],
		"description": "Java: protected void method"
	},

	// =============================================
	// Static Methods: 

	"java_shortPublicStaticVoidMethod" : {
		"prefix": "+!()",
		"body": [
			"public static void ${1:methodName} (${2:params}) {",
			"    $3",
			"}$0"
		],
		"description": "Java: public static void method"
	},

	"java_shortPrivateStaticVoidMethod" : {
		"prefix": "-!()",
		"body": [
			"private static void ${1:methodName} (${2:params}) {",
			"    $3",
			"}$0"
		],
		"description": "Java: private static void method"
	},

	"java_shortProtectedStaticVoidMethod" : {
		"prefix": "/!()",
		"body": [
			"protected static void ${1:methodName} (${2:params}) {",
			"    $3",
			"}$0"
		],
		"description": "Java: protected static void method"
	},

	// =============================================
	// Abstract Methods:

	"java_shortPublicAbstractVoidMethod" : {
		"prefix": "+?()",
		"body": "public abstract void ${1:methodName} (${2:params});",
		"description": "Java: public void method"
	},

	"java_shortProtectedAbstractVoidMethod" : {
		"prefix": "/?()",
		"body": "protected abstract void ${1:methodName} (${2:params});",
		"description": "Java: protected void method"
	},


}